# -*- coding: utf-8 -*-
"""190316H_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykt0ydsfSWETBy_sJ4W2inZ5h7GzdYhq
"""

import pandas as pd

dataframe_train = pd.read_csv('train.csv')
dataframe_test = pd.read_csv('test.csv')
dataframe_valid = pd.read_csv('valid.csv')
dataframe_train.head()

dataframe_train.info()
dataframe_train.describe()

from sklearn.preprocessing import RobustScaler

LABELS = [F'label_{i}' for i in range(1, 5)]
FEATURES = [F'feature_{i}' for i in range(1, 257)]

X_train, X_valid, X_test, y_train, y_valid, y_predict, y_test_1, y_test_2 = [{} for _ in range(8)]


for label in LABELS:
    if label == 'label_2':
        df_train = dataframe_train[dataframe_train['label_2'].notna()]
        df_valid = dataframe_valid[dataframe_valid['label_2'].notna()]
    else:
        df_train = dataframe_train
        df_valid = dataframe_valid
    df_test = dataframe_test

    scaler = RobustScaler()
    X_train[label] = pd.DataFrame(scaler.fit_transform(df_train.drop(LABELS, axis=1)), columns=FEATURES)
    y_train[label] = df_train[label]
    X_valid[label] = pd.DataFrame(scaler.transform(df_valid.drop(LABELS, axis=1)), columns=FEATURES)
    y_valid[label] = df_valid[label]
    X_test[label] = df_test.drop(LABELS, axis=1)

X_train['label_1'].head()

y_train['label_2']

from sklearn import svm, metrics

clf = svm.SVC(kernel='linear')
clf.fit(X_train['label_1'], y_train['label_1'])

y_predict['label_1'] = clf.predict(X_valid['label_1'])

print(metrics.confusion_matrix(y_valid['label_1'], y_predict['label_1']))
print(metrics.accuracy_score(y_valid['label_1'], y_predict['label_1']))
print(metrics.precision_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))

clf = svm.SVC(kernel='linear')
clf.fit(X_train['label_1'], y_train['label_1'])
y_test_1['label_1'] = clf.predict(X_test['label_1'])

clf = svm.SVC(kernel='linear')
clf.fit(X_train['label_2'], y_train['label_2'])
y_test_1['label_2'] = clf.predict(X_test['label_2'])

clf = svm.SVC(kernel='linear')
clf.fit(X_train['label_3'], y_train['label_3'])
y_test_1['label_3'] = clf.predict(X_test['label_3'])

clf = svm.SVC(kernel='linear', class_weight='balanced')
clf.fit(X_train['label_4'], y_train['label_4'])
y_test_1['label_4'] = clf.predict(X_test['label_4'])

from sklearn.feature_selection import SelectKBest, f_classif

selector = SelectKBest(f_classif, k=100)
X_select = selector.fit_transform(X_train['label_1'], y_train['label_1'])
print("Shape: ", X_select.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_select, y_train['label_1'])

y_predict['label_1'] = clf.predict(selector.transform(X_valid['label_1']))
print(metrics.confusion_matrix(y_valid['label_1'], y_predict['label_1']))
print(metrics.accuracy_score(y_valid['label_1'], y_predict['label_1']))
print(metrics.precision_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))

from sklearn.decomposition import PCA

pca = PCA(n_components=0.95, svd_solver='full')
pca.fit(X_train['label_1'])
X_train_ldr = pd.DataFrame(pca.transform(X_train['label_1']))
X_valid_ldr = pd.DataFrame(pca.transform(X_valid['label_1']))
X_test_ldr = pd.DataFrame(pca.transform(X_test['label_1']))
print("Shape: ", X_train_ldr.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_train_ldr, y_train['label_1'])

y_predict['label_1'] = clf.predict(X_valid_ldr)

print(metrics.confusion_matrix(y_valid['label_1'], y_predict['label_1']))
print(metrics.accuracy_score(y_valid['label_1'], y_predict['label_1']))
print(metrics.precision_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))

selector = SelectKBest(f_classif, k=50)
X_select = selector.fit_transform(X_train_ldr, y_train['label_1'])
print("Shape: ", X_select.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_select, y_train['label_1'])

y_predict['label_1'] = clf.predict(selector.transform(X_valid_ldr))
X_label_1 = selector.transform(X_test_ldr)
y_test_2['label_1'] = clf.predict(X_label_1)

print(metrics.confusion_matrix(y_valid['label_1'], y_predict['label_1']))
print(metrics.accuracy_score(y_valid['label_1'], y_predict['label_1']))
print(metrics.precision_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))
print(metrics.recall_score(y_valid['label_1'], y_predict['label_1'], average='weighted'))

pca = PCA(n_components=0.999, svd_solver='full')
pca.fit(X_train['label_2'])
X_train_ldr = pd.DataFrame(pca.transform(X_train['label_2']))
X_valid_ldr = pd.DataFrame(pca.transform(X_valid['label_2']))
X_test_ldr = pd.DataFrame(pca.transform(X_test['label_2']))
print("Shape: ", X_train_ldr.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_train_ldr, y_train['label_2'])

y_predict['label_2'] = clf.predict(X_valid_ldr)

selector = SelectKBest(f_classif, k=150)
X_select = selector.fit_transform(X_train_ldr, y_train['label_2'])
print("Shape: ", X_select.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_select, y_train['label_2'])

y_predict['label_2'] = clf.predict(selector.transform(X_valid_ldr))
X_label_2 = selector.transform(X_test_ldr)
y_test_2['label_2'] = clf.predict(X_label_2)

print(metrics.confusion_matrix(y_valid['label_2'], y_predict['label_2']))
print(metrics.accuracy_score(y_valid['label_2'], y_predict['label_2']))
print(metrics.precision_score(y_valid['label_2'], y_predict['label_2'], average='weighted'))
print(metrics.recall_score(y_valid['label_2'], y_predict['label_2'], average='weighted'))

pca = PCA(n_components=0.90, svd_solver='full')
pca.fit(X_train['label_3'])
X_train_ldr = pd.DataFrame(pca.transform(X_train['label_3']))
X_valid_ldr = pd.DataFrame(pca.transform(X_valid['label_3']))
X_test_ldr = pd.DataFrame(pca.transform(X_test['label_3']))
print("Shape: ", X_train_ldr.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_train_ldr, y_train['label_3'])

selector = SelectKBest(f_classif, k=5)
X_select = selector.fit_transform(X_train_ldr, y_train['label_3'])
print("Shape: ", X_select.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_select, y_train['label_3'])

y_predict['label_3'] = clf.predict(selector.transform(X_valid_ldr))
X_label_3 = selector.transform(X_test_ldr)
y_test_2['label_3'] = clf.predict(X_label_3)

print(metrics.confusion_matrix(y_valid['label_3'], y_predict['label_3']))
print(metrics.accuracy_score(y_valid['label_3'], y_predict['label_3']))
print(metrics.precision_score(y_valid['label_3'], y_predict['label_3'], average='weighted'))
print(metrics.recall_score(y_valid['label_3'], y_predict['label_3'], average='weighted'))

pca = PCA(n_components=0.90, svd_solver='full')
pca.fit(X_train['label_4'])
X_train_ldr = pd.DataFrame(pca.transform(X_train['label_4']))
X_valid_ldr = pd.DataFrame(pca.transform(X_valid['label_4']))
X_test_ldr = pd.DataFrame(pca.transform(X_test['label_4']))
print("Shape: ", X_train_ldr.shape)

clf = svm.SVC(kernel='linear', class_weight='balanced')
clf.fit(X_train_ldr, y_train['label_4'])

selector = SelectKBest(f_classif, k=37)
X_select = selector.fit_transform(X_train_ldr, y_train['label_4'])
print("Shape: ", X_select.shape)

clf = svm.SVC(kernel='linear')
clf.fit(X_select, y_train['label_4'])

y_predict['label_4'] = clf.predict(selector.transform(X_valid_ldr))
X_label_4 = selector.transform(X_test_ldr)
y_test_2['label_4'] = clf.predict(X_label_4)

print(metrics.confusion_matrix(y_valid['label_4'], y_predict['label_4']))
print(metrics.accuracy_score(y_valid['label_4'], y_predict['label_4']))
print(metrics.precision_score(y_valid['label_4'], y_predict['label_4'], average='weighted'))
print(metrics.recall_score(y_valid['label_4'], y_predict['label_4'], average='weighted'))

import numpy as np

csv_label_1 = np.column_stack([np.transpose(y_test_1['label_1']), np.transpose(y_test_2['label_1']), [len(X_label_1[0])] * len(y_test_1['label_1']), X_label_1])
csv_label_2 = np.column_stack([np.transpose(y_test_1['label_2']), np.transpose(y_test_2['label_2']), [len(X_label_2[0])] * len(y_test_1['label_2']), X_label_2])
csv_label_3 = np.column_stack([np.transpose(y_test_1['label_3']), np.transpose(y_test_2['label_3']), [len(X_label_3[0])] * len(y_test_1['label_3']), X_label_3])
csv_label_4 = np.column_stack([np.transpose(y_test_1['label_4']), np.transpose(y_test_2['label_4']), [len(X_label_4[0])] * len(y_test_1['label_4']), X_label_4])

np.savetxt('out.csv', csv_label_1, delimiter=',', fmt='%d')
with open('190316H_label_1.csv', 'a') as file:
    with open('out.csv', 'r') as temp_file:
        file.write(temp_file.read())

np.savetxt('out.csv', csv_label_2, delimiter=',', fmt='%d')
with open('190316H_label_2.csv', 'a') as file:
    with open('out.csv', 'r') as temp_file:
        file.write(temp_file.read())

np.savetxt('out.csv', csv_label_3, delimiter=',', fmt='%d')
with open('190316H_label_3.csv', 'a') as file:
    with open('out.csv', 'r') as temp_file:
        file.write(temp_file.read())

np.savetxt('out.csv', csv_label_4, delimiter=',', fmt='%d')
with open('190316H_label_4.csv', 'a') as file:
    with open('out.csv', 'r') as temp_file:
        file.write(temp_file.read())

import os
os.remove('out.csv')